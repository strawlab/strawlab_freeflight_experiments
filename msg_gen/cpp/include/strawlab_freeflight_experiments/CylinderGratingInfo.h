/* Auto-generated by genmsg_cpp for file /opt/ros/ros-flycave.electric.boost1.46/strawlab_freeflight_experiments/msg/CylinderGratingInfo.msg */
#ifndef STRAWLAB_FREEFLIGHT_EXPERIMENTS_MESSAGE_CYLINDERGRATINGINFO_H
#define STRAWLAB_FREEFLIGHT_EXPERIMENTS_MESSAGE_CYLINDERGRATINGINFO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace strawlab_freeflight_experiments
{
template <class ContainerAllocator>
struct CylinderGratingInfo_ {
  typedef CylinderGratingInfo_<ContainerAllocator> Type;

  CylinderGratingInfo_()
  : reset_phase_position(false)
  , phase_position(0.0)
  , phase_velocity(0.0)
  , wavelength(0.0)
  , contrast(0.0)
  , orientation(0.0)
  {
  }

  CylinderGratingInfo_(const ContainerAllocator& _alloc)
  : reset_phase_position(false)
  , phase_position(0.0)
  , phase_velocity(0.0)
  , wavelength(0.0)
  , contrast(0.0)
  , orientation(0.0)
  {
  }

  typedef uint8_t _reset_phase_position_type;
  uint8_t reset_phase_position;

  typedef float _phase_position_type;
  float phase_position;

  typedef float _phase_velocity_type;
  float phase_velocity;

  typedef float _wavelength_type;
  float wavelength;

  typedef float _contrast_type;
  float contrast;

  typedef float _orientation_type;
  float orientation;


private:
  static const char* __s_getDataType_() { return "strawlab_freeflight_experiments/CylinderGratingInfo"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "33cc2b3577994aec59fd718fd0be13fe"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "bool reset_phase_position # True to use 'phase_position', False to ignore\n\
float32 phase_position    # phase of grating (radians)\n\
float32 phase_velocity    # velocity of grating phase (radians per second)\n\
float32 wavelength        # spatial wavelength of grating (radians)\n\
float32 contrast          # Michelson contrast of grating\n\
float32 orientation       # orientation of grating (radians)\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, reset_phase_position);
    ros::serialization::serialize(stream, phase_position);
    ros::serialization::serialize(stream, phase_velocity);
    ros::serialization::serialize(stream, wavelength);
    ros::serialization::serialize(stream, contrast);
    ros::serialization::serialize(stream, orientation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, reset_phase_position);
    ros::serialization::deserialize(stream, phase_position);
    ros::serialization::deserialize(stream, phase_velocity);
    ros::serialization::deserialize(stream, wavelength);
    ros::serialization::deserialize(stream, contrast);
    ros::serialization::deserialize(stream, orientation);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(reset_phase_position);
    size += ros::serialization::serializationLength(phase_position);
    size += ros::serialization::serializationLength(phase_velocity);
    size += ros::serialization::serializationLength(wavelength);
    size += ros::serialization::serializationLength(contrast);
    size += ros::serialization::serializationLength(orientation);
    return size;
  }

  typedef boost::shared_ptr< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CylinderGratingInfo
typedef  ::strawlab_freeflight_experiments::CylinderGratingInfo_<std::allocator<void> > CylinderGratingInfo;

typedef boost::shared_ptr< ::strawlab_freeflight_experiments::CylinderGratingInfo> CylinderGratingInfoPtr;
typedef boost::shared_ptr< ::strawlab_freeflight_experiments::CylinderGratingInfo const> CylinderGratingInfoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace strawlab_freeflight_experiments

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "33cc2b3577994aec59fd718fd0be13fe";
  }

  static const char* value(const  ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x33cc2b3577994aecULL;
  static const uint64_t static_value2 = 0x59fd718fd0be13feULL;
};

template<class ContainerAllocator>
struct DataType< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "strawlab_freeflight_experiments/CylinderGratingInfo";
  }

  static const char* value(const  ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bool reset_phase_position # True to use 'phase_position', False to ignore\n\
float32 phase_position    # phase of grating (radians)\n\
float32 phase_velocity    # velocity of grating phase (radians per second)\n\
float32 wavelength        # spatial wavelength of grating (radians)\n\
float32 contrast          # Michelson contrast of grating\n\
float32 orientation       # orientation of grating (radians)\n\
\n\
";
  }

  static const char* value(const  ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.reset_phase_position);
    stream.next(m.phase_position);
    stream.next(m.phase_velocity);
    stream.next(m.wavelength);
    stream.next(m.contrast);
    stream.next(m.orientation);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CylinderGratingInfo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::strawlab_freeflight_experiments::CylinderGratingInfo_<ContainerAllocator> & v) 
  {
    s << indent << "reset_phase_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_phase_position);
    s << indent << "phase_position: ";
    Printer<float>::stream(s, indent + "  ", v.phase_position);
    s << indent << "phase_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.phase_velocity);
    s << indent << "wavelength: ";
    Printer<float>::stream(s, indent + "  ", v.wavelength);
    s << indent << "contrast: ";
    Printer<float>::stream(s, indent + "  ", v.contrast);
    s << indent << "orientation: ";
    Printer<float>::stream(s, indent + "  ", v.orientation);
  }
};


} // namespace message_operations
} // namespace ros

#endif // STRAWLAB_FREEFLIGHT_EXPERIMENTS_MESSAGE_CYLINDERGRATINGINFO_H

