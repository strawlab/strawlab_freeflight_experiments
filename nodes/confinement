#!/usr/bin/env python

import os
import numpy as np

PACKAGE='strawlab_freeflight_experiments'
import roslib
roslib.load_manifest(PACKAGE)
import rospy
import display_client # from vros_projectors package
from std_msgs.msg import String, UInt32
from ros_flydra.msg import flydra_mainbrain_super_packet
import rospkg

rospack = rospkg.RosPack()
pkg_dir = rospack.get_path(PACKAGE)

STIM_FILENAME = os.path.join(pkg_dir,'data/checkerboard.png.osg')
BLANK_FILENAME = os.path.join(pkg_dir,'data/midgray.osg')

TIMEOUT = 0.5
IMPOSSIBLE_OBJ_ID = 0

class Node(object):
    def __init__(self):
        rospy.init_node("confinement")
        rospy.Subscriber("flydra_mainbrain_super_packets",
                         flydra_mainbrain_super_packet,
                         self.on_flydra_mainbrain_super_packets)

        rospy.logwarn('HACK to set all display server modes')
        self.display_server = []
        for i in [0,1,3]:
            dsc = display_client.DisplayServerProxy('/display_server%d' % i,wait=True)
            dsc.set_mode('StimulusOSGFile')
            self.display_server.append( dsc )

        self.lock_object = rospy.Publisher('lock_object', UInt32)

        self.condition_pub = rospy.Publisher('confinement_condition', String)
        self.stimulus_pub = rospy.Publisher('stimulus_filename', String)
        self.stimulus_pub.publish( BLANK_FILENAME )
        self.currently_locked_obj_id = None
        self.condition = 'control'
        self._timer = rospy.Timer(rospy.Duration(5*60), # switch every 5 minutes
                                  self._switch_conditions)
        self._switch_conditions(None)

    def _switch_conditions(self,event):
        if self.condition=='confinement':
            self.condition='control'
        else:
            self.condition='confinement'
        rospy.loginfo('confinement condition: %s'%self.condition )
        self.condition_pub.publish( self.condition )

    def run(self):
        rospy.loginfo('running stimulus')
        r = rospy.Rate(10) # 10hz
        while not rospy.is_shutdown():
            if self.currently_locked_obj_id is not None:
                now = rospy.get_time()
                if now-self.last_seen_time > TIMEOUT:
                    self.drop_lock_on()
            r.sleep()

    def is_in_trigger_volume(self,pos):
        c = np.array( (0,0,0.5) )
        p = np.array( (pos.x, pos.y, pos.z) )
        dist = np.sqrt(np.sum((c-p)**2))
        if dist < 0.2:
            return True
        return False

    def on_flydra_mainbrain_super_packets(self,data):
        now = rospy.get_time()
        for packet in data.packets:
            for obj in packet.objects:
                if self.currently_locked_obj_id is not None:
                    if obj.obj_id == self.currently_locked_obj_id:
                        self.last_seen_time = now
                else:
                    if self.is_in_trigger_volume(obj.position):
                        self.lock_on(obj)

    def lock_on(self,obj):
        rospy.loginfo('locked object %d'%obj.obj_id)
        now = rospy.get_time()
        self.currently_locked_obj_id = obj.obj_id
        self.last_seen_time = now
        if self.condition=='confinement':
            self.stimulus_pub.publish( STIM_FILENAME )
        else:
            self.stimulus_pub.publish( BLANK_FILENAME )
        self.lock_object.publish( obj.obj_id )

    def drop_lock_on(self):
        rospy.loginfo('dropping locked object')
        self.currently_locked_obj_id = None
        self.stimulus_pub.publish( BLANK_FILENAME )
        self.lock_object.publish( IMPOSSIBLE_OBJ_ID )

def main():
    node = Node()
    return node.run()

if __name__=='__main__':
    main()
